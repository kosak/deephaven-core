name: kosak-win
run-name: "Will it blend v10: versioning"
on: [push, workflow_dispatch]

env:
  GH_PACKAGES_USERNAME: kosak
  GH_PACKAGES_FEED: https://nuget.pkg.github.com/kosak/index.json  

jobs:
  cpp_job:
    name: Build C++ client and let's do Python too
    runs-on: windows-2025

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Check out vcpkg
        uses: actions/checkout@v5
        with:
          repository: microsoft/vcpkg
          path: vcpkg

      - name: Bootstrap vcpkg
        shell: cmd
        run: ./vcpkg/bootstrap-vcpkg.bat

      - name: Add Github NuGet caches (source/sink) for vcpkg
        shell: pwsh
        run: |
          $nuget_exe = & ./vcpkg/vcpkg.exe fetch nuget
          & $nuget_exe sources add `
          -Source "${{ env.GH_PACKAGES_FEED }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.GH_PACKAGES_USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          & $nuget_exe setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" -Source "${{ env.GH_PACKAGES_FEED }}"
        
      - name: Run cmake configuration
        shell: cmd
        env:
          VCPKG_BINARY_SOURCES: "clear;nuget,${{ env.GH_PACKAGES_FEED }},readwrite"
        run: cmake -S cpp-client/deephaven -B cpp-client/deephaven/build --toolchain ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/dhinstall -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON

      - name: Run cmake build
        shell: cmd
        run: cmake --build cpp-client/deephaven/build --config RelWithDebInfo --target install

  version_job:
    name: Find the Deephaven version (takes forever)
    runs-on: ubuntu-24.04
    outputs:
      dh_version: ${{ steps.print_version.outputs.dh_version }}

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Run Gradle printVersion
        id: print_version
        run: echo dh_version=$(./gradlew :printVersion -q) >> $GITHUB_OUTPUT

  echo_job:
    name: echo the Deephaven version (sad)
    runs-on: windows-2025
    needs: version_job
    steps:
      - run: echo "hello the version is ${{ needs.version_job.outputs.dh_version }}"
