name: Windows Client Builds
run-name: "Will it blend v47: Operation sad. Let's start with ticking"
on: [push, workflow_dispatch]

env:
  GH_PACKAGES_USERNAME: kosak
  GH_PACKAGES_FEED: https://nuget.pkg.github.com/kosak/index.json
  DHINSTALL: ${{ github.workspace }}/dhinstall

jobs:
#==============================================================================
  cpp_job:
    name: Build C++ client or fetch from cache
    runs-on: windows-2025

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Lookup or begin the creation of the cached installation directory
        id: cache-cpp-install
        uses: actions/cache@v4
        with:
          path: ${{ env.DHINSTALL }}
          key: ${{ runner.os }}-cpp-client-${{ hashfiles('cpp-client/**', 'proto/**') }}

      - name: Check out vcpkg
        if: steps.cache-cpp-install.outputs.cache-hit != 'true'
        uses: actions/checkout@v5
        with:
          repository: microsoft/vcpkg
          path: vcpkg

      - name: Bootstrap vcpkg
        if: steps.cache-cpp-install.outputs.cache-hit != 'true'
        shell: cmd
        run: ./vcpkg/bootstrap-vcpkg.bat

      # See https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-packages
      - name: Configure nuget to lookup / create cached packages that we need or need to build
        if: steps.cache-cpp-install.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $nuget_exe = & ./vcpkg/vcpkg.exe fetch nuget
          & $nuget_exe sources add `
          -Source "${{ env.GH_PACKAGES_FEED }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.GH_PACKAGES_USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          & $nuget_exe setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" -Source "${{ env.GH_PACKAGES_FEED }}"

      - name: Run cmake configuration
        if: steps.cache-cpp-install.outputs.cache-hit != 'true'
        shell: cmd
        env:
          VCPKG_BINARY_SOURCES: "clear;nuget,${{ env.GH_PACKAGES_FEED }},readwrite"
        run: cmake -S cpp-client/deephaven -B cpp-client/deephaven/build --toolchain ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=${{ env.DHINSTALL }} -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON

      - name: Run cmake build
        if: steps.cache-cpp-install.outputs.cache-hit != 'true'
        shell: cmd
        run: cmake --build cpp-client/deephaven/build --config RelWithDebInfo --target install

      - name: Upload install directory as build artifact, to be used directly or by dependent clients like Python ticking
        uses: actions/upload-artifact@v4
        with:
          name: cpp-client-install
          path: ${{ env.DHINSTALL }}

#==============================================================================
  version_job:
    name: Find the Deephaven version by grepping gradle.properties
    runs-on: ubuntu-24.04
    outputs:
      dhc_version: ${{ steps.get-dhc-version.outputs.dhc_version }}

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Output Deephaven Version
        id: get-dhc-version
        run: |
          echo "dhc_version=$(grep ^deephavenBaseVersion= gradle.properties | cut -d'=' -f2)-$(grep ^deephavenBaseQualifier= gradle.properties | cut -d'=' -f2)" >> $GITHUB_OUTPUT

#==============================================================================
  python_static_job:
    name: Python static client
    needs: [cpp_job, version_job]
    runs-on: windows-2025

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Get the C++ installation as a build artifact
        uses: actions/download-artifact@v4
        with:
          name: cpp-client-install
          path: ${{ env.DHINSTALL }}

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install the 'wheel' package
        shell: cmd
        run: pip3 install wheel

      - name: Install requirements-dev.txt
        shell: cmd
        run: |
          cd .\py\client
          pip3 install -r requirements-dev.txt

      - name: Run setup.py
        shell: cmd
        env:
          DEEPHAVEN_VERSION: ${{ needs.version_job.outputs.dhc_version }}
        run: |
          cd .\py\client
          python setup.py bdist_wheel

      - name: Do I have a wheel in this location? Try to upload it.
        shell: cmd
        run: |
          dir .\py\client\dist

      - name: Upload .whl file as build artifact, to be used directly or by dependent clients like Python ticking
        uses: actions/upload-artifact@v4
        with:
          name: py-static-wheel
          path: ./py/client/dist/*.whl

#==============================================================================
  python_ticking_job:
    name: Python ticking client
    needs: python_static_job
    runs-on: windows-2025

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Get the C++ installation as a build artifact
        uses: actions/download-artifact@v4
        with:
          name: cpp-client-install
          path: ${{ env.DHINSTALL }}

      - name: Get the Python static installation as a build artifact
        uses: actions/download-artifact@v4
        with:
          name: py-static-wheel
          path: ./py/client/dist

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install the 'wheel' and 'cython' packages
        shell: cmd
        run: pip3 install wheel cython

      - name: Install the wheel from the static client
        shell: cmd
        run: pip3 install --force --no-deps ./py/client/dist/*.whl
