name: kosak-win
run-name: "Will it blend v38: the xyzinstall experiment"
on: [push, workflow_dispatch]

env:
  GH_PACKAGES_USERNAME: kosak
  GH_PACKAGES_FEED: https://nuget.pkg.github.com/kosak/index.json
  XYZINSTALL: ${{ github.workspace }}/dhinstall

jobs:
  cpp_job:
    name: Build C++ client
    runs-on: windows-2025

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Cache the installation directory
        id: cache-cpp-install
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/dhinstall
          key: ${{ runner.os }}-cpp-client-${{ hashfiles('cpp-client/**', 'proto/**') }}

      - name: Check out vcpkg
        if: steps.cache-cpp-install.outputs.cache-hit != 'true'
        uses: actions/checkout@v5
        with:
          repository: microsoft/vcpkg
          path: vcpkg

      - name: Bootstrap vcpkg
        if: steps.cache-cpp-install.outputs.cache-hit != 'true'
        shell: cmd
        run: ./vcpkg/bootstrap-vcpkg.bat

      - name: Add Github NuGet caches (source/sink) for vcpkg
        if: steps.cache-cpp-install.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $nuget_exe = & ./vcpkg/vcpkg.exe fetch nuget
          & $nuget_exe sources add `
          -Source "${{ env.GH_PACKAGES_FEED }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.GH_PACKAGES_USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          & $nuget_exe setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" -Source "${{ env.GH_PACKAGES_FEED }}"

      - name: Run cmake configuration
        if: steps.cache-cpp-install.outputs.cache-hit != 'true'
        shell: cmd
        env:
          VCPKG_BINARY_SOURCES: "clear;nuget,${{ env.GH_PACKAGES_FEED }},readwrite"
        run: cmake -S cpp-client/deephaven -B cpp-client/deephaven/build --toolchain ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/dhinstall -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON

      - name: Run cmake build
        if: steps.cache-cpp-install.outputs.cache-hit != 'true'
        shell: cmd
        run: cmake --build cpp-client/deephaven/build --config RelWithDebInfo --target install

      - name: Upload install directory as build artifact
        uses: actions/upload-artifact@v4
        with:
          name: cpp-client-install
          path: ${{ github.workspace }}/dhinstall

  version_job:
    name: Find the Deephaven version by grepping gradle.properties
    runs-on: ubuntu-24.04
    outputs:
      dhc_version: ${{ steps.get-dhc-version.outputs.dhc_version }}

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Output Deephaven Version
        id: get-dhc-version
        run: |
          echo "dhc_version=$(grep ^deephavenBaseVersion= gradle.properties | cut -d'=' -f2)-$(grep ^deephavenBaseQualifier= gradle.properties | cut -d'=' -f2)" >> $GITHUB_OUTPUT

  echo_job:
    name: echo the Deephaven version (not sad)
    runs-on: windows-2025
    needs: version_job
    steps:
      - run: echo "hello the version is ${{ needs.version_job.outputs.dhc_version }}"

  python_static_job:
    name: Python static client and maybe also ticking client
    needs: [cpp_job, version_job]
    runs-on: windows-2025

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Get the C++ installation as a build artifact
        uses: actions/download-artifact@v4
        with:
          name: cpp-client-install
          path: ${{ github.workspace }}/dhinstall

      - name: Set common variables
        run: echo "DHINSTALL=${{ github.workspace }}/dhinstall" >> $env:GITHUB_ENV

      - name: DO YOU HAVE MY VARIABLE
        run: |
          echo yes I do $env:DHINSTALL and I am done

      - name: Create the Python venv
        run: python3 -m venv "${{ github.workspace }}/cython-venv"

  corey_fun_times:
    name: Corey fun times
    runs-on: windows-2025

    steps:
      - name: echo the thing
        run: echo are these the same $env:XYZINSTALL and also ${{ github.workspace }}/dhinstall blah
