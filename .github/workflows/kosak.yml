name: kosak-win
run-name: "Will it blend v26: calculated a hash maybe"
on: [push, workflow_dispatch]

env:
  GH_PACKAGES_USERNAME: kosak
  GH_PACKAGES_FEED: https://nuget.pkg.github.com/kosak/index.json

jobs:
  cpp_job:
    name: Build C++ client
    runs-on: windows-2025

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Print me some hash codes
        run: echo zamboni trash ${{ hashfiles('cpp-client/**', 'proto/**') }} bye

      - name: Check out vcpkg
        uses: actions/checkout@v5
        with:
          repository: microsoft/vcpkg
          path: vcpkg

      - name: Bootstrap vcpkg
        shell: cmd
        run: ./vcpkg/bootstrap-vcpkg.bat

      - name: Add Github NuGet caches (source/sink) for vcpkg
        shell: pwsh
        run: |
          $nuget_exe = & ./vcpkg/vcpkg.exe fetch nuget
          & $nuget_exe sources add `
          -Source "${{ env.GH_PACKAGES_FEED }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.GH_PACKAGES_USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          & $nuget_exe setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" -Source "${{ env.GH_PACKAGES_FEED }}"

      - name: Run cmake configuration
        shell: cmd
        env:
          VCPKG_BINARY_SOURCES: "clear;nuget,${{ env.GH_PACKAGES_FEED }},readwrite"
        run: cmake -S cpp-client/deephaven -B cpp-client/deephaven/build --toolchain ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/dhinstall -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON

      - name: Run cmake build
        shell: cmd
        run: cmake --build cpp-client/deephaven/build --config RelWithDebInfo --target install

  version_job:
    name: Find the Deephaven version (separate job because it takes 45 seconds)
    runs-on: ubuntu-24.04
    outputs:
      dhc_version: ${{ steps.get-dhc-version.outputs.dhc_version }}

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Setup JDK 11
        id: setup-java-11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup JDK 17
        id: setup-java-17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set JAVA_HOME
        run: echo "JAVA_HOME=${{ steps.setup-java-11.outputs.path }}" >> $GITHUB_ENV

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      - name: Remind the Developer to remove cache-read-only
        run: echo Hi, please remove the above "cache-read-only" thing when you move back to 'main'

      - name: Output Deephaven Version
        id: get-dhc-version
        run: |
          ./gradlew :outputVersion
          cat build/version
          echo "dhc_version=$(cat build/version)" >> $GITHUB_OUTPUT

  echo_job:
    name: echo the Deephaven version (sad)
    runs-on: windows-2025
    needs: version_job
    steps:
      - run: echo "hello the version is ${{ needs.version_job.outputs.dhc_version }}"

  python_static_job:
    name: Python static client and maybe also ticking client
    needs: [cpp_job, version_job]
    runs-on: windows-2025

    steps:
      - name: Check out this repo
        uses: actions/checkout@v5

      - name: Get the C++ build
        run: echo get the build please thanks bye

      - name: Set common variables
        run: echo "DHINSTALL=${{ github.workspace }}/dhinstall" >> $env:GITHUB_ENV

      - name: DO YOU HAVE MY VARIABLE
        run: |
          echo yes I do $env:DHINSTALL and I am done

      - name: Create the Python venv
        run: python3 -m venv "${{ github.workspace }}/cython-venv"

  this_is_painful_job:
    name: failing to understand why my variables don't propagate
    runs-on: windows-2025

    steps:
      - name: Set uncommon variables
        run: echo "DHINSTALL=${{ github.workspace }}/dhinstall" >> $env:GITHUB_ENV

      - name: THESE ARE YOUR CHOICES
        run: |
          echo with colon using powershell syntax $env:DHINSTALL bye
          echo with period using github syntax ${{ env.DHINSTALL }} alsobye

  probe_job:
    name: understanding things
    runs-on: windows-2025

    steps:
      - name: what is pwd
        run: pwd

      - name: what is workspace
        run: echo ${{ github.workspace }}
